generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  dob          DateTime?
  firstName    String?
  lastName     String?
  bookings     Booking[]
  favorites    Favorite[]
}

model Hotel {
  name        String
  city        String
  price       Int
  rating      Float?
  createdAt   DateTime     @default(now())
  id          Int          @id @default(autoincrement())
  capacity    Int          @default(2)
  country     String       @default("")
  description String?
  bookings    Booking[]
  favorites   Favorite[]
  images      HotelImage[]
}

model HotelImage {
  id      Int     @id @default(autoincrement())
  url     String
  alt     String?
  hotelId Int
  hotel   Hotel   @relation(fields: [hotelId], references: [id])
}

model Booking {
  id           Int      @id @default(autoincrement())
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  hotelId      Int
  hotel        Hotel    @relation(fields: [hotelId], references: [id])

  checkIn      DateTime
  checkOut     DateTime

  // NEW:
  guests       Int      @default(1)     // number of guests staying
  contactName  String?                  // optional: person making the booking
  contactEmail String?                  // optional: email for confirmation

  createdAt    DateTime @default(now())
}


model Favorite {
  id        Int      @id @default(autoincrement())
  hotelId   Int
  userId    String
  createdAt DateTime @default(now())
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([hotelId, userId])
}
