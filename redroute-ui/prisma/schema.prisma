generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  dob           DateTime?
  firstName     String?
  lastName      String?
  bookings      Booking[]
  eventBookings EventBooking[]
  favorites     Favorite[]
}

model Hotel {
  name        String
  city        String
  price       Int
  rating      Float?
  createdAt   DateTime     @default(now())
  id          Int          @id @default(autoincrement())
  capacity    Int          @default(2)
  country     String       @default("")
  description String?
  bookings    Booking[]
  favorites   Favorite[]
  images      HotelImage[]
}

model HotelImage {
  id      Int     @id @default(autoincrement())
  url     String
  alt     String?
  hotelId Int
  hotel   Hotel   @relation(fields: [hotelId], references: [id])
}

model Booking {
  userId       String
  createdAt    DateTime @default(now())
  id           Int      @id @default(autoincrement())
  hotelId      Int
  checkIn      DateTime
  checkOut     DateTime
  contactEmail String?
  contactName  String?
  guests       Int      @default(1)
  totalCost    Int      @default(0)
  hotel        Hotel    @relation(fields: [hotelId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  hotelId   Int
  userId    String
  createdAt DateTime @default(now())
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([hotelId, userId])
}

model Event {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  location    String
  startsAt    DateTime       @db.Timestamptz(6)
  price       Int
  capacity    Int            @default(100)
  imageUrl    String
  imageAlt    String?
  createdAt   DateTime       @default(now()) @db.Timestamptz(6)
  bookings    EventBooking[]

  @@unique([name, startsAt])
  @@index([startsAt])
}

model EventBooking {
  id           Int      @id @default(autoincrement())
  userId       String
  eventId      Int
  qty          Int      @default(1)
  totalCost    Int      @default(0)
  contactName  String?
  contactEmail String?
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  event        Event    @relation(fields: [eventId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}
